/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ src/app/(dashboard)/notifications/page.tsx ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
'use client'

import { useEffect, useState }           from 'react'
import { getAuth }                       from 'firebase/auth'
import { doc, onSnapshot, setDoc }       from 'firebase/firestore'
import { db }                            from '@/lib/firebase'
import Image                             from 'next/image'
import Spinner                           from '@/components/Spinner'
import PrimaryButton                     from '@/components/PrimaryButton'

type Method = 'telegram' | 'viber' | 'sms'
interface ProfileExtra {
  notifyMethod: Method | null
  notifyValue : string
}

const METHODS: { id:Method; label:string; icon:string }[] = [
  { id:'telegram', label:'Telegram', icon:'/dashboard/icons/telegram.svg' },
  { id:'viber',    label:'Viber',    icon:'/dashboard/icons/viber.svg'    },
  { id:'sms',      label:'SMS',      icon:'/dashboard/icons/sms.svg'      },
]

export default function NotificationsPage () {
  /* ---------- –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ---------- */
  const user = getAuth().currentUser
  if (!user) return <p className="p-8 text-center">–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ üôÉ</p>

  /* ---------- —Å—Ç–∞–Ω –ø—Ä–æ—Ñ—ñ–ª—é ---------- */
  const [prof,   setProf  ] = useState<ProfileExtra>()
  const [method, setMethod] = useState<Method|null>(null)
  const [value , setValue ] = useState('')
  const [saved , setSaved ] = useState(false)     // ‚Üê –±–µ–π–¥–∂ ¬´–ó–±–µ—Ä–µ–∂–µ–Ω–æ¬ª

  /* –æ—Ç—Ä–∏–º—É—î–º–æ / —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç users/{uid} */
  useEffect(() => {
    const ref = doc(db, 'users', user.uid)
    return onSnapshot(ref, snap => {
      if (snap.exists()) setProf(snap.data() as any)
      else {
        setDoc(ref, { notifyMethod:null, notifyValue:'' })
        setProf  ({ notifyMethod:null, notifyValue:'' })
      }
    })
  }, [])

  /* –∫–æ–ª–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è ‚Äî –Ω–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É */
  useEffect(() => {
    if (prof) {
      setMethod(prof.notifyMethod)
      setValue (prof.notifyValue )
    }
  }, [prof])

  if (!prof) return <Spinner/>

  /* ---------- –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---------- */
  const save = async () => {
    if (!method || !value.trim()) {
      alert('–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è / –Ω–æ–º–µ—Ä')
      return
    }
    await setDoc(
      doc(db, 'users', user.uid),
      { notifyMethod: method, notifyValue: value.trim() },
      { merge: true },
    )

    /* –ø–æ–∫–∞–∑—É—î–º–æ –±–µ–π–¥–∂ 2 —Å */
    setSaved(true)
    setTimeout(() => setSaved(false), 2000)
  }

  /* ---------- UI ---------- */
  return (
    <div className="relative flex flex-col items-center gap-10">

      <header className="mt-4 text-center">
        <h1 className="mb-1 text-3xl font-bold">
          –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω –∑–∞—è–≤–æ–∫
        </h1>
        <p className="text-sm text-gray-500">
          –ù–∞ –æ–±—Ä–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–æ–¥–æ –∑–º—ñ–Ω–∏
          —Å—Ç–∞–Ω—É –∑–∞—è–≤–æ–∫
        </p>
      </header>

      {/* –≤–∏–±—ñ—Ä –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ */}
      <div className="flex gap-12">
        {METHODS.map(m => (
          <button
            key={m.id}
            onClick={() => setMethod(m.id)}
            className={`
              flex flex-col items-center gap-4 rounded-2xl p-6 transition
              ${method === m.id
                ? 'bg-[#dbe8ff] scale-105 shadow'
                : 'hover:bg-[#eef4ff]'}
            `}
          >
            <Image src={m.icon} alt="" width={120} height={120} />
            <span className="text-xl font-semibold">{m.label}</span>
          </button>
        ))}
      </div>

      {/* –ø–æ–ª–µ –≤–≤–æ–¥—É */}
      <div className="w-full max-w-md space-y-6">
        <label className="flex flex-col items-center gap-2 font-semibold">
          –í–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
          <input
            className="w-full rounded-full border border-[#2C79FF]/60 px-6 py-2
                       text-center outline-none focus:ring-2 focus:ring-[#2C79FF]"
            value={value}
            onChange={e => setValue(e.target.value)}
            placeholder="https://t.me/‚Ä¶  –∞–±–æ  +38 (067)‚Ä¶"
          />
        </label>

        <div className="flex justify-center">
          <PrimaryButton onClick={save}>–ó–±–µ—Ä–µ–≥—Ç–∏</PrimaryButton>
        </div>
      </div>

      {/* –±–µ–π–¥–∂ ¬´–ó–±–µ—Ä–µ–∂–µ–Ω–æ¬ª */}
      {saved && (
        <div
          className="
            fixed bottom-8 left-1/2 -translate-x-1/2
            animate-fade-in-up
          "
        >
          <button
            disabled
            className="
              rounded-full border-2 border-[#2C79FF] bg-[#dbe8ff]/60
              px-8 py-2 font-semibold text-[#2C79FF] shadow
            "
          >
            –ó–±–µ—Ä–µ–∂–µ–Ω–æ
          </button>
        </div>
      )}
    </div>
  )
}

/* ---------- –Ω–µ–≤–µ–ª–∏–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è (Tailwind) ---------- */
/* –î–æ–¥–∞–π—Ç–µ —É global.css / tailwind.css, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î */
/*
@keyframes fade-in-up {
  from { opacity:0; transform: translate(-50%, 20px); }
  to   { opacity:1; transform: translate(-50%, 0); }
}
.animate-fade-in-up {
  animation: fade-in-up 0.3s ease-out;
}
*/
