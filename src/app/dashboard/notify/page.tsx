/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ src/app/(dashboard)/notifications/page.tsx ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
'use client'

import { useEffect, useState }               from 'react'
import { getAuth }                           from 'firebase/auth'
import { doc, onSnapshot, setDoc }           from 'firebase/firestore'
import { db }                                from '@/lib/firebase'
import Image                                 from 'next/image'
import Spinner                               from '@/components/Spinner'
import PrimaryButton                         from '@/components/PrimaryButton'

type Method = 'telegram' | 'viber' | 'sms'
interface ProfileExtra { notifyMethod: Method|null; notifyValue: string }

const METHODS: { id:Method; label:string; icon:string }[] = [
  { id:'telegram', label:'Telegram', icon:'/dashboard/icons/telegram.svg' },
  { id:'viber',    label:'Viber',    icon:'/dashboard/icons/viber.svg'    },
  { id:'sms',      label:'SMS',      icon:'/dashboard/icons/sms.svg'      },
]

export default function NotificationsPage () {
  /* ---------- –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ---------- */
  const user = getAuth().currentUser
  if (!user) return <p className="p-8 text-center">–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ üôÉ</p>

  /* ---------- –ø—Ä–æ—Ñ—ñ–ª—å –∑ Firestore ---------- */
  const [prof, setProf] = useState<ProfileExtra>()

  useEffect(() => {
    const ref = doc(db,'users',user.uid)
    return onSnapshot(ref,snap=>{
      if (snap.exists()) setProf(snap.data() as any)
      else {                             // –ø–µ—Ä—à–∏–π –≤—Ö—ñ–¥ ‚Äì –ø–æ—Ä–æ–∂–Ω—ñ–π —à–∞–±–ª–æ–Ω
        setDoc(ref,{notifyMethod:null,notifyValue:''})
        setProf({notifyMethod:null,notifyValue:''})
      }
    })
  },[])

  /* ---------- –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–µ–π—Ç —Ñ–æ—Ä–º–∏ ---------- */
  /*  !! –æ–≥–æ–ª–æ—à—É—î–º–æ –î–û return, —â–æ–± –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö—É–∫—ñ–≤ –Ω–µ –º—ñ–Ω—è–ª–∞—Å—å  */
  const [method, setMethod] = useState<Method|null>(null)
  const [value , setValue ] = useState('')

  /* –∫–æ–ª–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø—ñ–¥—Ç—è–≥–Ω—É–≤—Å—è ‚Äì –∑–∞–ø–æ–≤–Ω—é—î–º–æ —ñ–Ω–ø—É—Ç–∏ */
  useEffect(()=>{
    if (prof){
      setMethod(prof.notifyMethod)
      setValue (prof.notifyValue )
    }
  },[prof])

  if (!prof) return <Spinner/>

  /* ---------- –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---------- */
  const save = async()=>{
    if (!method || !value.trim()){
      alert('–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è / –Ω–æ–º–µ—Ä')
      return
    }
    await setDoc(doc(db,'users',user.uid),
                 {notifyMethod:method, notifyValue:value.trim()},
                 {merge:true})
    alert('–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ')
  }

  /* ---------- UI ---------- */
  return (
    <div className="flex flex-col items-center gap-10">

      <header className="mt-4 text-center">
        <h1 className="text-3xl font-bold mb-1">
          –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω –∑–∞—è–≤–æ–∫
        </h1>
        <p className="text-gray-500 text-sm">
          –ù–∞ –æ–±—Ä–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–æ–¥–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –∑–∞—è–≤–æ–∫
        </p>
      </header>

      {/* –≤–∏–±—ñ—Ä –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ */}
      <div className="flex gap-12">
        {METHODS.map(m=>(
          <button key={m.id}
                  onClick={()=>setMethod(m.id)}
                  className={`
                    flex flex-col items-center gap-4 rounded-2xl p-6 transition
                    ${method===m.id
                      ? 'bg-[#dbe8ff] scale-105 shadow'
                      : 'hover:bg-[#eef4ff]'}
                  `}
          >
            <Image src={m.icon} alt="" width={120} height={120}/>
            <span className="text-xl font-semibold">{m.label}</span>
          </button>
        ))}
      </div>

      {/* –ø–æ–ª–µ –≤–≤–æ–¥—É */}
      <div className="w-full max-w-md space-y-6">
        <label className="flex flex-col gap-2 font-semibold items-center">
          –í–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
          <input
            className="w-full rounded-full border border-[#2C79FF]/60 px-6 py-2
                       text-center outline-none focus:ring-2 focus:ring-[#2C79FF]"
            value={value}
            onChange={e=>setValue(e.target.value)}
            placeholder="https://t.me/‚Ä¶  –∞–±–æ  +38 (067)‚Ä¶"
          />
        </label>

        <div className="flex justify-center">
          <PrimaryButton onClick={save}>–ó–±–µ—Ä–µ–≥—Ç–∏</PrimaryButton>
        </div>
      </div>

    </div>
  )
}
