/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ src/app/dashboard/RequestsList.tsx ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
'use client'

import { useEffect, useState, useRef, useLayoutEffect } from 'react'
import {
  collection, query, where, orderBy,
  onSnapshot, Timestamp, limit as qLimit
} from 'firebase/firestore'
import { getAuth, onAuthStateChanged } from 'firebase/auth'
import { db }       from '@/lib/firebase'
import RequestCard  from './RequestCard'
import Spinner      from '@/client/components/Spinner'

export type RequestDoc = {
  id:            string
  device:        string
  brand:         string
  model:         string
  description:   string
  photos:        string[]
  contactMethod: string
  contactValue:  string
  address:       string
  status:        string
  createdAt:     Timestamp | null
}

/*
 * –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫ –Ω–∞ ¬´–µ–∫—Ä–∞–Ω—ñ¬ª. –î–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ 4,
 * –Ω–∞ —à–∏—Ä—à–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö –≤–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ
 * —Å–∫—Ä–æ–ª—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ ¬´–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ¬ª.
 */
const MOBILE_PAGE = 4

/**
 *  ‚Ä¢ —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ `limit` ‚Üí –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö, –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–µ—Ç  
 *  ‚Ä¢ —è–∫—â–æ `limit` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Üí –≤–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ, –∞–ª–µ –¥—Ä–æ–±–∏–º–æ —ó—Ö –ø–æ `PAGE`
 *  ‚Ä¢ —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ `limit` ‚Üí –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö, –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–µ—Ç
 *  ‚Ä¢ —è–∫—â–æ `limit` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Üí –≤–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ, –∞–ª–µ –¥—Ä–æ–±–∏–º–æ —ó—Ö –ø–æ `pageSize`
 */

export default function RequestsList(
  { limit, doneOnly = false }: { limit?: number; doneOnly?: boolean } = {}
) {
  const [docs,        setDocs]    = useState<RequestDoc[]>([])
  const [loading,     setLoading] = useState(true)
  const [pageSize,    setPageSize]= useState(MOBILE_PAGE)
  const containerRef  = useRef<HTMLDivElement>(null)

  /* --------------------- –≤–∏–∑–Ω–∞—á–∞—î–º–æ pageSize --------------------- */
  useLayoutEffect(() => {
    if (limit) return

    const update = () => {
      if (window.innerWidth < 640) { // –º–æ–±—ñ–ª—å–Ω—ñ
        setPageSize(MOBILE_PAGE)
        return
      }
      const card = containerRef.current?.querySelector('article') as HTMLElement | null
      if (!card) return
      const cardHeight = card.offsetHeight + 16 // –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π gap
      const rect = containerRef.current!.getBoundingClientRect()
      const available = window.innerHeight - rect.top - 100 // –∑–∞–ø–∞—Å –ø—ñ–¥ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
      const n = Math.max(1, Math.floor(available / cardHeight))
      setPageSize(n)
    }

    update()
    window.addEventListener('resize', update)
    return () => window.removeEventListener('resize', update)
  }, [docs, limit])

  /* ------------ —Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ limit –Ω–µ–º–∞—î) ------------ */
  const [page, setPage] = useState(0)          // 0-based –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const pages = limit
    ? [docs]                                   // –æ–¥–Ω–∞ ¬´—Å—Ç–æ—Ä—ñ–Ω–∫–∞¬ª –±–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    : Array.from({ length: Math.ceil(docs.length / pageSize) },
        (_, i) => docs.slice(i * pageSize, (i + 1) * pageSize))

  /* -------------------- Firestore subscription -------------------- */
  useEffect(() => {
    const stop = onAuthStateChanged(getAuth(), user => {
      if (!user) { setDocs([]); setLoading(false); return }

      let q = query(
        collection(db, 'requests'),
        where('userId', '==', user.uid),
        orderBy('createdAt', 'desc'),
      )
      if (limit) q = query(q, qLimit(limit))
      if (doneOnly) q = query(q, where('status', '==', 'done'))

      const unsub = onSnapshot(q, snap => {
        setDocs(
          snap.docs.map(d => ({
            id: d.id,
            ...(d.data() as Omit<RequestDoc, 'id'>),
          }))
        )
        setLoading(false)
      })
      return unsub
    })
    return stop
  }, [limit, doneOnly])

  /* ----------- UI ----------- */
  if (loading) return <Spinner/>

  if (!docs.length)
    return <p className="pt-20 text-center text-gray-500 whitespace-pre-line">
      –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –ø–µ—Ä—à–æ—ó –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –ú–µ—Ç–æ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞. –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ üôÇ
    </p>

  return (
    <div ref={containerRef} className="relative space-y-4" data-requests-list>
      {/* –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞  */}
      {pages[page].map(r => (
        <RequestCard
          /* compact ‚Äî —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ limit –ù–ï –∑–∞–¥–∞–Ω–∏–π */
          compact={!limit}
          key={r.id}
          {...r}
        />
      ))}

      {/* –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è ‚Äî —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó */}
      {pages.length > 1 && (
        <div className="fixed bottom-8 left-1/2 z-10 -translate-x-1/2 flex gap-3">
          {pages.map((_, i) => (
            <button
              key={i}
              onClick={() => setPage(i)}
              className={`
                flex h-10 w-10 items-center justify-center rounded-full border-2
                ${i === page
                  ? 'border-[#2C79FF] bg-[#dbe8ff] font-semibold text-[#2C79FF]'
                  : 'border-[#2C79FF]/60 hover:bg-[#eef4ff]'}
              `}
            >
              {i + 1}
            </button>
          ))}
        </div>
      )}
    </div>
  )
}
